/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

export {};

declare global {
  namespace Schema {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      posts: Array<Post | null>;

      /**
       * Fetches an object given its ID
       */
      node?: Node;
    }

    export interface PostWhereInput {
      id?: string;
    }

    export interface Post extends Node {
      id: string;
      title: string;
      content: string;
    }

    /**
     * An object with an ID
     */
    export interface Node {
      /**
       * The id of the object.
       */
      id: string;
    }

    /** Use this to resolve interface type Node */
    export type PossibleNodeTypeNames = 'Post';

    export interface NodeNameMap {
      Node: Node;
      Post: Post;
    }

    export interface Mutation {
      createPost?: Post;
      updatePost?: Post;
      deletePost?: Post;
    }

    export interface PostCreateInput {
      title: string;
      content: string;
    }

    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver;
      Post?: PostTypeResolver;
      Node?: {
        __resolveType: NodeTypeResolver;
      };

      Mutation?: MutationTypeResolver;
    }
    export interface QueryTypeResolver<TParent = any> {
      posts?: QueryToPostsResolver<TParent>;
      node?: QueryToNodeResolver<TParent>;
    }

    export interface QueryToPostsArgs {
      where?: PostWhereInput;
    }
    export interface QueryToPostsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToPostsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }

    export interface QueryToNodeArgs {
      id: string;
    }
    export interface QueryToNodeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
    }

    export interface PostTypeResolver<TParent = any> {
      id?: PostToIdResolver<TParent>;
      title?: PostToTitleResolver<TParent>;
      content?: PostToContentResolver<TParent>;
    }

    export interface PostToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }

    export interface PostToTitleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }

    export interface PostToContentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }

    export interface NodeTypeResolver<TParent = any> {
      (parent: TParent, context: any, info: GraphQLResolveInfo): 'Post';
    }
    export interface MutationTypeResolver<TParent = any> {
      createPost?: MutationToCreatePostResolver<TParent>;
      updatePost?: MutationToUpdatePostResolver<TParent>;
      deletePost?: MutationToDeletePostResolver<TParent>;
    }

    export interface MutationToCreatePostArgs {
      data: PostCreateInput;
    }
    export interface MutationToCreatePostResolver<TParent = any, TResult = any> {
      (
        parent: TParent,
        args: MutationToCreatePostArgs,
        context: any,
        info: GraphQLResolveInfo,
      ): TResult;
    }

    export interface MutationToUpdatePostArgs {
      where: PostWhereInput;
      data: PostCreateInput;
    }
    export interface MutationToUpdatePostResolver<TParent = any, TResult = any> {
      (
        parent: TParent,
        args: MutationToUpdatePostArgs,
        context: any,
        info: GraphQLResolveInfo,
      ): TResult;
    }

    export interface MutationToDeletePostArgs {
      where: PostWhereInput;
    }
    export interface MutationToDeletePostResolver<TParent = any, TResult = any> {
      (
        parent: TParent,
        args: MutationToDeletePostArgs,
        context: any,
        info: GraphQLResolveInfo,
      ): TResult;
    }
  }
}
